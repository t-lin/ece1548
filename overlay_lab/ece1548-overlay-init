#!/bin/bash -f
# Create a ssh key if there is no key in the .ssh directory
# Set an option in a local file
# Get an option from an INI file
# iniget config-file section option
source /home/savitb/bin/functions
USER="$(whoami)"
KEY_NAME="$USER"key
KEY_NAME=`echo $KEY_NAME | sed 's/\.//g'`
SECGROUP_NAME=$USER

blue_desc_title "  Initializing all settings for ($USER)"

green_desc_title "1. Creating a keypair ($KEY_NAME) ..."
if [[ ! -f $HOME/.ssh/id_rsa.pub ]]; then
    command_desc "ssh-keygen -t rsa"
    echo -e "\n" | ssh-keygen -t rsa -N ""
else
    green_desc "An existing keypair was found, skipping create"
fi
AUTH_KEY=$(cat ~/.ssh/id_rsa.pub)

green_desc_title "2. Importing the key-pair ($KEY_NAME) to SAVI Testbed ..."
command_desc "nova keypair-add --pub_key $HOME/.ssh/id_rsa.pub $KEY_NAME"
UPLOADED_KEY=`nova keypair-list | grep $KEY_NAME`
if [[ ! -z "$UPLOADED_KEY" ]]; then
    # Key-pair was same name was found
    # Assume the key doesn't match: delete and re-upload
    nova keypair-delete $KEY_NAME
    sleep 1
fi
nova keypair-add --pub_key $HOME/.ssh/id_rsa.pub $KEY_NAME

green_desc_title "3. Creating a security group ($SECGROUP_NAME) ..."
SECGROUP=`nova secgroup-list | grep $SECGROUP_NAME`
if [[ ! -z "$SECGROUP" ]]; then
    green_desc "Security Group $SECGROUP_NAME already exists, skipping create"
else
    command_desc "nova secgroup-create $SECGROUP_NAME \"$SECGROUP_NAME secgroup\""
    nova secgroup-create $SECGROUP_NAME "$SECGROUP_NAME secgroup"
fi

#green_desc_title "3. Creating a security group ($SECGROUP_NAME) ..."
#command_desc "nova secgroup-create $SECGROUP_NAME \"$SECGROUP_NAME secgroup\""
#nova secgroup-create $SECGROUP_NAME "$SECGROUP_NAME secgroup"

green_desc_title "4. Adding rules to enable SSH, ICMP, OpenFlow, and VXLAN to ($SECGROUP_NAME) ..."
SSH_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 22`
ICMP_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i icmp | grep 255`
OF_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i tcp | grep 6633`
VXLAN_RULE=`nova secgroup-list-rules $SECGROUP_NAME | grep -i udp | grep 4789`
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 22 22 0.0.0.0/0"
if [[ -z "$SSH_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 22 22 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME ICMP -1 255 0.0.0.0/0"
if [[ -z "$ICMP_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME ICMP -1 255 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME TCP 6633 6633 0.0.0.0/0"
if [[ -z "$OF_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME TCP 6633 6633 0.0.0.0/0
fi
command_desc "nova secgroup-add-rule $SECGROUP_NAME UDP 4789 4789 0.0.0.0/0"
if [[ -z "$VXLAN_RULE" ]]; then
    nova secgroup-add-rule $SECGROUP_NAME UDP 4789 4789 0.0.0.0/0
fi

green_desc_title "5. Creating ViNO files related to this lab ..."
cp -f /home/savitb/thomas/ece1548/overlay_lab/config2.py ~
green_desc "Created file 'config2.py' in the home directory ($HOME/config2.py)"
cp -f /home/savitb/thomas/ece1548/overlay_lab/topology2.py ~
green_desc "Created file 'topology2.py' in the home directory ($HOME/topology2.py)"
cp -f /home/savitb/thomas/ece1548/overlay_lab/vino ~
green_desc "Created file 'vino' in the home directory ($HOME/vino)"
cp -f /home/savitb/thomas/ece1548/overlay_lab/vino_cleanup ~
green_desc "Created file 'vino_cleanup' in the home directory ($HOME/vino_cleanup)"

# Ensure vino scripts are executable
chmod 755 $HOME/vino
chmod 755 $HOME/vino_cleanup

# Don't allow others to read topology2.py and config2.py files
chmod o-r $HOME/topology2.py
chmod g-r $HOME/topology2.py
chmod o-r $HOME/config2.py
chmod g-r $HOME/config2.py

# Configure config file
sed -i "s/username=/username=\'${OS_USERNAME}\'/g" $HOME/config2.py
sed -i "s/password=/password=\'${OS_PASSWORD}\'/g" $HOME/config2.py
sed -i "s/region_name=/region_name=\'${OS_REGION_NAME}\'/g" $HOME/config2.py
sed -i "s/tenant_name=/tenant_name=\'${OS_TENANT_NAME}\'/g" $HOME/config2.py
sed -i "s/instance_prefix=/instance_prefix=\'${OS_USERNAME}_\'/g" $HOME/config2.py
sed -i "s/key_name=/key_name=\'${KEY_NAME}\'/g" $HOME/config2.py
sed -i "s/sec_group_name=/sec_group_name=\'${SECGROUP_NAME}\'/g" $HOME/config2.py

# Configure topology file
sed -i "s/CORE/${OS_REGION_NAME}/g" $HOME/topology2.py

echo ""
blue_desc "Initialization completed."
